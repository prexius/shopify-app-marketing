{
  "version": 3,
  "sources": ["../../../app/routes/app.createcampaingform.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\app.createcampaingform.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\app.createcampaingform.tsx\");\n  import.meta.hot.lastModified = \"1706224470627.105\";\n}\n// REMIX HMR END\n\nimport { Form, useActionData, useSubmit } from '@remix-run/react';\nimport { Button, Frame, Layout, Modal, Page, TextField } from '@shopify/polaris';\nimport { useCallback, useState } from 'react';\nexport const action = async ({\n  request\n}) => {};\nconst CreateCampaingForm = ({\n  activate,\n  setActivate\n}) => {\n  _s();\n  const handleChange = useCallback(() => setActivate(!activate), [activate, setActivate]);\n  const activator = <Button onClick={handleChange}>Create new</Button>;\n  const [value, setValue] = useState('default');\n  const handleChangeText = useCallback(newValue => setValue(newValue), []);\n  const submit = useSubmit();\n  const actionData = useActionData();\n  console.log(actionData, 'CreateCampaingForm');\n  const sendEmails = () => submit({}, {\n    replace: true,\n    method: 'POST'\n  });\n  return <Page>\r\n            <Frame>\r\n                <Modal activator={activator} open={activate} onClose={handleChange} title=\"Create a new email campaigns\" primaryAction={{\n        content: 'Send',\n        onAction: sendEmails\n      }} secondaryActions={[{\n        content: 'Finish Later',\n        onAction: () => {}\n      }]}>\r\n                    <Modal.Section>\r\n                        <Form>\r\n                            <Layout>\r\n                                <Layout.Section>\r\n                                    <TextField label=\"Campaing Name\" value={value} onChange={handleChangeText} autoComplete=\"off\" />\r\n                                    <TextField label=\"To\" value={value} onChange={handleChangeText} autoComplete=\"off\" />\r\n                                    <TextField label=\"Corporation\" value={value} onChange={handleChangeText} autoComplete=\"off\" />\r\n                                    <TextField label=\"From\" value={value} onChange={handleChangeText} autoComplete=\"off\" />\r\n                                    <TextField label=\"Email Subject\" value={value} onChange={handleChangeText} autoComplete=\"off\" />\r\n                                    <TextField label=\"Content\" value={value} onChange={handleChangeText} autoComplete=\"off\" />\r\n                                    <Button submit>send</Button>\r\n                                </Layout.Section>\r\n                            </Layout>\r\n                        </Form>\r\n                    </Modal.Section>\r\n                </Modal>\r\n\r\n            </Frame>\r\n        </Page>;\n};\n_s(CreateCampaingForm, \"1ZsCAkPsW0m1sEQgQ/ubEMlrt/Q=\", false, function () {\n  return [useSubmit, useActionData];\n});\n_c = CreateCampaingForm;\nexport default CreateCampaingForm;\nvar _c;\n$RefreshReg$(_c, \"CreateCampaingForm\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["init_esm", "import_react"]
}
